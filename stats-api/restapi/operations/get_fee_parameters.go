// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetFeeParams creates a new GetFeeParams object
// with the default values initialized.
func NewGetFeeParams() GetFeeParams {

	var (
		// initialize parameters with default values

		formatDefault = string("suf")
	)

	return GetFeeParams{
		Format: &formatDefault,
	}
}

// GetFeeParams contains all the bound params for the get fee operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetFee
type GetFeeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*How to format the values. Options are 'suf' which is the smallest unit of FIO, 'float' which is whole FIO with up to 9 digits, and 'usd' which is the current price.
	  In: query
	  Default: "suf"
	*/
	Format *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetFeeParams() beforehand.
func (o *GetFeeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFormat, qhkFormat, _ := qs.GetOK("format")
	if err := o.bindFormat(qFormat, qhkFormat, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFormat binds and validates parameter Format from query.
func (o *GetFeeParams) bindFormat(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetFeeParams()
		return nil
	}
	o.Format = &raw

	if err := o.validateFormat(formats); err != nil {
		return err
	}

	return nil
}

// validateFormat carries on validations for parameter Format
func (o *GetFeeParams) validateFormat(formats strfmt.Registry) error {

	if err := validate.EnumCase("format", "query", *o.Format, []interface{}{"suf", "float", "usd"}, true); err != nil {
		return err
	}

	return nil
}
