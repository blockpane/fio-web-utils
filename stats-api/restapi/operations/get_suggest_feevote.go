// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSuggestFeevoteHandlerFunc turns a function with the right signature into a get suggest feevote handler
type GetSuggestFeevoteHandlerFunc func(GetSuggestFeevoteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSuggestFeevoteHandlerFunc) Handle(params GetSuggestFeevoteParams) middleware.Responder {
	return fn(params)
}

// GetSuggestFeevoteHandler interface for that can handle valid get suggest feevote params
type GetSuggestFeevoteHandler interface {
	Handle(GetSuggestFeevoteParams) middleware.Responder
}

// NewGetSuggestFeevote creates a new http.Handler for the get suggest feevote operation
func NewGetSuggestFeevote(ctx *middleware.Context, handler GetSuggestFeevoteHandler) *GetSuggestFeevote {
	return &GetSuggestFeevote{Context: ctx, Handler: handler}
}

/* GetSuggestFeevote swagger:route GET /suggest/feevote getSuggestFeevote

A suggested feevote value using sane values formatted as required by fio.fee::setfeevote. Note setting a fee vote is only required once unless new fee endpoints are added.

*/
type GetSuggestFeevote struct {
	Context *middleware.Context
	Handler GetSuggestFeevoteHandler
}

func (o *GetSuggestFeevote) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSuggestFeevoteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
